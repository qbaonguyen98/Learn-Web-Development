/* PART 1 */
.container-1 {
    display: flex;               /*mặc định flex xếp các child của nó theo hàng, bất kể child inline hay block*/
}
.container-2 {
    display: flex;
    flex-direction: column;      /*chiều sắp xếp theo cột*/
}

/* PART 2 */     /* dấu * là mặc định */
/*
    - justify-content:    flex-start* | flex-end | center | space-between | space-around | space-evenly
    - align-items:   flex-start | flex-end | center | baseline | stretch*
*/
.container-3 {
    display: flex;
    justify-content: space-around;          /* thử test với các cái khác */
}
.container-4 {
    display: flex;
    align-items: center;                 /* thử test với các cái khác */
    height: 50px;  
}
/*  
    =>  justify-content cân chỉnh theo đúng chiều của flexbox (row/col)
        align-items cân chỉnh theo chiều vuông góc với chiều của flexbox
VD:
    xét flexbox theo row: nếu muốn content của nó nằm ở góc dưới bên phải thì p chỉnh:
        - justify-contenb: flex-end >>> để qua phải trước
        - align-items: flex-end
*/

/* PART 3 */
/*
    flex-basis: length;     >>> cho biết độ rộng (THEO CHIỀU CỦA flexbox) MONG MUỐN của 1 element trong flex
                            gọi là mong muốn vì một số màn hình nhỏ, độ rộng cả trang không đủ thì
                            nó sẽ tự động chỉnh lại
*/
.container-5 {
    display: flex;                      /* thằng cha phải là flexbox trước đã */
    color: white;
    font-weight: bold;
}
.container-5 > .child-1 {
    flex-basis: 300px;
    background-color: brown;
}
.container-5 > .child-2 {
    flex-basis: 100px;
    background-color: rgb(4, 97, 160);
}
.container-5 > .child-3 {
    flex-basis: 200px;
    background-color: rgb(34, 121, 22);
}

/* PART 4 */
/*
    flex-basis: 0* | number;     >>> cho biết độ rộng được thừa kế (tính theo số phần) từ độ rộng thừa của cả flexbox
*/
.container-6 {
    display: flex;                      /* thằng cha phải là flexbox trước đã */
    color: white;
    font-weight: bold;
}
.container-6 > .child-1 {
    flex-basis: 300px;
    background-color: brown;        /* th 1 k đc hưởng phần nào*/
}
.container-6 > .child-2 {
    flex-basis: 200px;
    background-color: rgb(4, 97, 160);
    flex-grow: 3;                     /* th 2 đc hưởng 3/4 phần*/
}
.container-6 > .child-3 {
    flex-basis: 100px;
    background-color: rgb(34, 121, 22);
    flex-grow: 1;                     /* th 2 đc hưởng 1/4 phần*/
}

/* PART 5 */
/*
    flex-shrink: 1* | number;     >>> số này sẽ để vô công thức tính phần bị cắt đi của element nếu độ rộng của
                                    tất cả elements vượt quá độ rộng của flexbox
                                nếu = 0, thì element đó sẽ đc giữ nguyên độ rộng, những thằng còn lại sẽ bị cắt bớt
*/
.container-7 {
    display: flex;                      /* thằng cha phải là flexbox trước đã */
    color: white;
    font-weight: bold;
}
.container-7 > .child-3 {
    flex-basis: 900px;
    background-color: brown;        
}
.container-7 > .child-2 {
    flex-basis: 700px;
    background-color: rgb(4, 97, 160);
    flex-shrink: 0;                     /* th 2 đc giữ nguyên*/
}
.container-7 > .child-1 {
    flex-basis: 400px;
    background-color: rgb(34, 121, 22);
    flex-grow: 1;                     
}

/* PART 6 */
/*
    order: 0* | number;     >>> element có order nhỏ hơn thì sẽ được xếp trước
*/
.container-8 {
    display: flex;                      /* thằng cha phải là flexbox trước đã */
    color: white;
    font-weight: bold;
    height: 50px;
}
.container-8 > .child-1 {
    flex-basis: 700px;
    background-color: rgb(4, 97, 160);
    flex-shrink: 0;                     
}                                           /*mặc định 2 th child đều có order là 0, xếp theo thứ tự trên html*/
.container-8 > .child-2 {
    flex-basis: 400px;
    background-color: rgb(34, 121, 22);
    flex-grow: 1;                     
}
.container-swap > .child-1{
    order: 1;                           /* child-1: order = 1; child-2: order=0*/
}